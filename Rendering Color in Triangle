#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include<iostream>

void FramBuffer_Size_Call_Back(GLFWwindow* window, int BW, int BH)
{
	glViewport(0, 0, 640, 480);
}
void ProcessInput(GLFWwindow* window);

const char* vertexShaderSource = "#version 330 core \n"
"layout(location = 0 ) in vec3 aPos; \n"
"out vec4 vertexColor; \n"
"void main() \n"
"{ \n"
"gl_Position = vec4(aPos , 1.0); \n"
"vertexColor = vec4(0.5 , 1.0 , 0.0 , 1.0); \n"

"}\0";

const char* fragmentShaderSource = "#version 330 core \n"
"out vec4 FragColor; \n"
"uniform vec4 ourColor; \n"
"void main() \n"
"{\n"
"FragColor = ourColor; \n"
"}\0";

int main(void)
{
	//GLFWwindow* window;
	if (!glfwInit())
	{
		return -1;
	}

	GLFWwindow* window = glfwCreateWindow(640, 480, "Rv singh", NULL, NULL);

	if (window == NULL)
	{
		std::cout << "Error : Window not created ";
		glfwTerminate();
	}
	glfwMakeContextCurrent(window);
	glfwSetFramebufferSizeCallback(window, FramBuffer_Size_Call_Back);

	glewExperimental = GL_TRUE;
	if (glewInit() != GLEW_OK)
		std::cout << "Error";

	std::cout << glGetString(GL_VERSION) << std::endl;

	unsigned int vertexShader;
	vertexShader = glCreateShader(GL_VERTEX_SHADER);
	glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
	glCompileShader(vertexShader);

	int success;
	char infoLog[512];
	glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);
	if (!success)
	{
		glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);
		std::cout << "ERROR::SHADER::VERTEX::COMPLITION FAILED  " << infoLog << " " << std::endl;
	}

	unsigned int fragementShader;
	fragementShader = glCreateShader(GL_FRAGMENT_SHADER);
	glShaderSource(fragementShader, 1, &fragmentShaderSource, NULL);
	glCompileShader(fragementShader);

	glGetShaderiv(fragementShader, GL_COMPILE_STATUS, &success);
	if (!success)
	{
		glGetShaderInfoLog(fragementShader, 512, NULL, infoLog);
		std::cout << "ERROR::SHADER::FRAGEMEMT::COMPLITION FAILED  " << infoLog << " " << std::endl;
	}

	unsigned int shaderProgram;
	shaderProgram = glCreateProgram();
	glAttachShader(shaderProgram, vertexShader);
	glAttachShader(shaderProgram, fragementShader);
	glLinkProgram(shaderProgram);


	float Position[] = {
		-0.5f, -0.5f, 0.0f,
		 0.5f, -0.5f, 0.0f, 
		 0.0f,  0.5f, 0.0f

	};


	unsigned int buffer ;
	glGenBuffers(1, &buffer);
	glBindBuffer(GL_ARRAY_BUFFER, buffer);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Position), Position, GL_STATIC_DRAW);
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(float)*3, 0);

	while (!glfwWindowShouldClose(window))
	{
		ProcessInput(window);

		glClearColor(0.0f, 0.0f, 0.1f , 1.0f);
		glClear(GL_COLOR_BUFFER_BIT);

		glUseProgram(shaderProgram);

		float timeValue = glfwGetTime();
		float greenValue = (sin(timeValue / 0.5f) + 1.0);
		int vertexColorLocation = glGetUniformLocation(shaderProgram, "ourColor");
		glUniform4f(vertexColorLocation, 1.0f, greenValue, 0.0f, 0.0f);
		glDrawArrays(GL_TRIANGLES, 0, 3);

		glfwSwapBuffers(window);
		glfwPollEvents();
	}

	glDeleteBuffers(1, &buffer);
	glDeleteProgram(shaderProgram);

	glfwTerminate();
	return 0;

}
void ProcessInput(GLFWwindow* window)
{
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
	{
		glfwSetWindowShouldClose(window,true);
	}
}
